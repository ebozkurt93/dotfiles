#!/usr/bin/env python3

# Attempts to parse table input from databases like mysql
# and postgresql, and convert to csv or json.
# Should handle symbols in the cells such as `|` in many cases as well.
# Tested with python 3.13 but would probably work with any modern python version.

import sys
import csv
import json
import argparse

def split_row(row):
    fields = []
    current_field = []
    for i, char in enumerate(row):
        if char == "|":
            # Check if pipe is likely a separator
            is_separator = (
                i == 0 or  # First character
                i == len(row) - 1 or  # Last character
                (row[i - 1].isspace() and row[i + 1].isspace())  # Space before and after
            )
            if is_separator:
                fields.append("".join(current_field).strip())
                current_field = []
            else:
                current_field.append(char)
        else:
            current_field.append(char)

    # Add the last field
    if current_field:
        fields.append("".join(current_field).strip())

    return fields

def parse_table(input_data):
    lines = input_data.splitlines()
    # Remove lines with only borders (e.g., +---+)
    lines = [line for line in lines if not set(line.strip()) <= {"-", "+", "|", " "}]

    # Remove metadata line like "(5 rows)" only if it's the last line
    if lines and lines[-1].strip().startswith("(") and "rows" in lines[-1].lower():
        lines.pop()

    if not lines:
        return [], []

    # Extract headers and rows
    headers = split_row(lines[0])
    rows = [split_row(line) for line in lines[1:]]

    # Trim empty columns from the start and end
    while headers and headers[0] == "":
        headers.pop(0)
        for row in rows:
            if row:
                row.pop(0)

    while headers and headers[-1] == "":
        headers.pop()
        for row in rows:
            if row:
                row.pop()

    return headers, rows

def table_to_csv(headers, rows):
    import io
    output = io.StringIO()  # Create an in-memory file object
    writer = csv.writer(output, quoting=csv.QUOTE_ALL)
    writer.writerow(headers)
    writer.writerows(rows)
    return output.getvalue()  # Return the content as a string

def table_to_json(headers, rows):
    data = [dict(zip(headers, row)) for row in rows]
    return json.dumps(data, indent=2)

def main():
    parser = argparse.ArgumentParser(
        description="Convert table input to CSV or JSON. By default, the output format is CSV. "
                    "Provide input via stdin and get the result via stdout."
    )
    parser.add_argument(
        "-f", "--format", choices=["csv", "c", "json", "j"], default="csv", help="Output format: csv (or c) and json (or j). Default: csv"
    )
    args = parser.parse_args()

    # If no input is provided, display help
    if sys.stdin.isatty():
        parser.print_help()
        sys.exit(0)

    # Read input from stdin
    input_data = sys.stdin.read()

    # Parse the table
    headers, rows = parse_table(input_data)

    if not headers or not rows:
        sys.stderr.write("Error: Failed to parse input table.\n")
        sys.exit(1)

    # Convert to the desired format
    if args.format in ["csv", "c"]:
        output = table_to_csv(headers, rows)
    else:
        output = table_to_json(headers, rows)

    # Write output to stdout
    sys.stdout.write(output + "\n")

if __name__ == "__main__":
    main()

